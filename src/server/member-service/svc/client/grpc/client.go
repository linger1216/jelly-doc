// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 07f56d626f
// Version Date: 2020-12-21T21:40:22Z

// Package grpc provides a gRPC client for the Member service.
package grpc

import (
	"context"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	"github.com/linger1216/jelly-doc/src/server/member-service/svc"
	pb "github.com/linger1216/jelly-doc/src/server/pb"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...ClientOption) (pb.MemberServer, error) {
	var cc clientConfig

	for _, f := range options {
		err := f(&cc)
		if err != nil {
			return nil, errors.Wrap(err, "cannot apply option")
		}
	}

	clientOptions := []grpctransport.ClientOption{
		grpctransport.ClientBefore(
			contextValuesToGRPCMetadata(cc.headers)),
	}
	var createEndpoint endpoint.Endpoint
	{
		createEndpoint = grpctransport.NewClient(
			conn,
			"pb.Member",
			"Create",
			EncodeGRPCCreateRequest,
			DecodeGRPCCreateResponse,
			pb.CreateMemberResponse{},
			clientOptions...,
		).Endpoint()
	}

	var getEndpoint endpoint.Endpoint
	{
		getEndpoint = grpctransport.NewClient(
			conn,
			"pb.Member",
			"Get",
			EncodeGRPCGetRequest,
			DecodeGRPCGetResponse,
			pb.GetMemberResponse{},
			clientOptions...,
		).Endpoint()
	}

	var listEndpoint endpoint.Endpoint
	{
		listEndpoint = grpctransport.NewClient(
			conn,
			"pb.Member",
			"List",
			EncodeGRPCListRequest,
			DecodeGRPCListResponse,
			pb.ListMemberResponse{},
			clientOptions...,
		).Endpoint()
	}

	var updateEndpoint endpoint.Endpoint
	{
		updateEndpoint = grpctransport.NewClient(
			conn,
			"pb.Member",
			"Update",
			EncodeGRPCUpdateRequest,
			DecodeGRPCUpdateResponse,
			pb.EmptyResponse{},
			clientOptions...,
		).Endpoint()
	}

	var deleteEndpoint endpoint.Endpoint
	{
		deleteEndpoint = grpctransport.NewClient(
			conn,
			"pb.Member",
			"Delete",
			EncodeGRPCDeleteRequest,
			DecodeGRPCDeleteResponse,
			pb.EmptyResponse{},
			clientOptions...,
		).Endpoint()
	}

	return svc.Endpoints{
		CreateEndpoint: createEndpoint,
		GetEndpoint:    getEndpoint,
		ListEndpoint:   listEndpoint,
		UpdateEndpoint: updateEndpoint,
		DeleteEndpoint: deleteEndpoint,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCCreateResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC create reply to a user-domain create response. Primarily useful in a client.
func DecodeGRPCCreateResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.CreateMemberResponse)
	return reply, nil
}

// DecodeGRPCGetResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC get reply to a user-domain get response. Primarily useful in a client.
func DecodeGRPCGetResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.GetMemberResponse)
	return reply, nil
}

// DecodeGRPCListResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC list reply to a user-domain list response. Primarily useful in a client.
func DecodeGRPCListResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ListMemberResponse)
	return reply, nil
}

// DecodeGRPCUpdateResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC update reply to a user-domain update response. Primarily useful in a client.
func DecodeGRPCUpdateResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.EmptyResponse)
	return reply, nil
}

// DecodeGRPCDeleteResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC delete reply to a user-domain delete response. Primarily useful in a client.
func DecodeGRPCDeleteResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.EmptyResponse)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCCreateRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain create request to a gRPC create request. Primarily useful in a client.
func EncodeGRPCCreateRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.CreateMemberRequest)
	return req, nil
}

// EncodeGRPCGetRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain get request to a gRPC get request. Primarily useful in a client.
func EncodeGRPCGetRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.GetMemberRequest)
	return req, nil
}

// EncodeGRPCListRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain list request to a gRPC list request. Primarily useful in a client.
func EncodeGRPCListRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.ListMemberRequest)
	return req, nil
}

// EncodeGRPCUpdateRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain update request to a gRPC update request. Primarily useful in a client.
func EncodeGRPCUpdateRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UpdateMemberRequest)
	return req, nil
}

// EncodeGRPCDeleteRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain delete request to a gRPC delete request. Primarily useful in a client.
func EncodeGRPCDeleteRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.DeleteMemberRequest)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.ClientRequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}
