// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 07f56d626f
// Version Date: 2020-12-21T21:40:22Z

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/linger1216/jelly-doc/src/server/pb"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC BasisApiServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.BasisApiServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// basisapi

		create: grpctransport.NewServer(
			endpoints.CreateEndpoint,
			DecodeGRPCCreateRequest,
			EncodeGRPCCreateResponse,
			serverOptions...,
		),
		get: grpctransport.NewServer(
			endpoints.GetEndpoint,
			DecodeGRPCGetRequest,
			EncodeGRPCGetResponse,
			serverOptions...,
		),
		list: grpctransport.NewServer(
			endpoints.ListEndpoint,
			DecodeGRPCListRequest,
			EncodeGRPCListResponse,
			serverOptions...,
		),
		update: grpctransport.NewServer(
			endpoints.UpdateEndpoint,
			DecodeGRPCUpdateRequest,
			EncodeGRPCUpdateResponse,
			serverOptions...,
		),
		delete: grpctransport.NewServer(
			endpoints.DeleteEndpoint,
			DecodeGRPCDeleteRequest,
			EncodeGRPCDeleteResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the BasisApiServer interface
type grpcServer struct {
	create grpctransport.Handler
	get    grpctransport.Handler
	list   grpctransport.Handler
	update grpctransport.Handler
	delete grpctransport.Handler
}

// Methods for grpcServer to implement BasisApiServer interface

func (s *grpcServer) Create(ctx context.Context, req *pb.CreateApiRequest) (*pb.CreateApiResponse, error) {
	_, rep, err := s.create.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.CreateApiResponse), nil
}

func (s *grpcServer) Get(ctx context.Context, req *pb.GetApiRequest) (*pb.GetApiResponse, error) {
	_, rep, err := s.get.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.GetApiResponse), nil
}

func (s *grpcServer) List(ctx context.Context, req *pb.ListApiRequest) (*pb.ListApiResponse, error) {
	_, rep, err := s.list.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.ListApiResponse), nil
}

func (s *grpcServer) Update(ctx context.Context, req *pb.UpdateApiRequest) (*pb.EmptyResponse, error) {
	_, rep, err := s.update.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.EmptyResponse), nil
}

func (s *grpcServer) Delete(ctx context.Context, req *pb.DeleteApiRequest) (*pb.EmptyResponse, error) {
	_, rep, err := s.delete.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.EmptyResponse), nil
}

// Server Decode

// DecodeGRPCCreateRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC create request to a user-domain create request. Primarily useful in a server.
func DecodeGRPCCreateRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.CreateApiRequest)
	return req, nil
}

// DecodeGRPCGetRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC get request to a user-domain get request. Primarily useful in a server.
func DecodeGRPCGetRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetApiRequest)
	return req, nil
}

// DecodeGRPCListRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC list request to a user-domain list request. Primarily useful in a server.
func DecodeGRPCListRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.ListApiRequest)
	return req, nil
}

// DecodeGRPCUpdateRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC update request to a user-domain update request. Primarily useful in a server.
func DecodeGRPCUpdateRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.UpdateApiRequest)
	return req, nil
}

// DecodeGRPCDeleteRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC delete request to a user-domain delete request. Primarily useful in a server.
func DecodeGRPCDeleteRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.DeleteApiRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCCreateResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain create response to a gRPC create reply. Primarily useful in a server.
func EncodeGRPCCreateResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.CreateApiResponse)
	return resp, nil
}

// EncodeGRPCGetResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain get response to a gRPC get reply. Primarily useful in a server.
func EncodeGRPCGetResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.GetApiResponse)
	return resp, nil
}

// EncodeGRPCListResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain list response to a gRPC list reply. Primarily useful in a server.
func EncodeGRPCListResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.ListApiResponse)
	return resp, nil
}

// EncodeGRPCUpdateResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain update response to a gRPC update reply. Primarily useful in a server.
func EncodeGRPCUpdateResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.EmptyResponse)
	return resp, nil
}

// EncodeGRPCDeleteResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain delete response to a gRPC delete reply. Primarily useful in a server.
func EncodeGRPCDeleteResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.EmptyResponse)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
