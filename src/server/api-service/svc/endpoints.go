// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 07f56d626f
// Version Date: 2020-12-21T21:40:22Z

package svc

// This file contains methods to make individual endpoints from services,
// request and response types to serve those endpoints, as well as encoders and
// decoders for those types, for all of our supported transport serialization
// formats.

import (
	"context"
	"fmt"

	"github.com/go-kit/kit/endpoint"

	pb "github.com/linger1216/jelly-doc/src/server/pb"
)

// Endpoints collects all of the endpoints that compose an add service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
//
// In a server, it's useful for functions that need to operate on a per-endpoint
// basis. For example, you might pass an Endpoints to a function that produces
// an http.Handler, with each method (endpoint) wired up to a specific path. (It
// is probably a mistake in design to invoke the Service methods on the
// Endpoints struct in a server.)
//
// In a client, it's useful to collect individually constructed endpoints into a
// single type that implements the Service interface. For example, you might
// construct individual endpoints using transport/http.NewClient, combine them into an Endpoints, and return it to the caller as a Service.
type Endpoints struct {
	CreateEndpoint endpoint.Endpoint
	GetEndpoint    endpoint.Endpoint
	ListEndpoint   endpoint.Endpoint
	UpdateEndpoint endpoint.Endpoint
	DeleteEndpoint endpoint.Endpoint
}

// Endpoints

func (e Endpoints) Create(ctx context.Context, in *pb.CreateApiRequest) (*pb.CreateApiResponse, error) {
	response, err := e.CreateEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.CreateApiResponse), nil
}

func (e Endpoints) Get(ctx context.Context, in *pb.GetApiRequest) (*pb.GetApiResponse, error) {
	response, err := e.GetEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.GetApiResponse), nil
}

func (e Endpoints) List(ctx context.Context, in *pb.ListApiRequest) (*pb.ListApiResponse, error) {
	response, err := e.ListEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.ListApiResponse), nil
}

func (e Endpoints) Update(ctx context.Context, in *pb.UpdateApiRequest) (*pb.EmptyResponse, error) {
	response, err := e.UpdateEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.EmptyResponse), nil
}

func (e Endpoints) Delete(ctx context.Context, in *pb.DeleteApiRequest) (*pb.EmptyResponse, error) {
	response, err := e.DeleteEndpoint(ctx, in)
	if err != nil {
		return nil, err
	}
	return response.(*pb.EmptyResponse), nil
}

// Make Endpoints

func MakeCreateEndpoint(s pb.ApiServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.CreateApiRequest)
		v, err := s.Create(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeGetEndpoint(s pb.ApiServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.GetApiRequest)
		v, err := s.Get(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeListEndpoint(s pb.ApiServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.ListApiRequest)
		v, err := s.List(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeUpdateEndpoint(s pb.ApiServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.UpdateApiRequest)
		v, err := s.Update(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

func MakeDeleteEndpoint(s pb.ApiServer) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(*pb.DeleteApiRequest)
		v, err := s.Delete(ctx, req)
		if err != nil {
			return nil, err
		}
		return v, nil
	}
}

// WrapAllExcept wraps each Endpoint field of struct Endpoints with a
// go-kit/kit/endpoint.Middleware.
// Use this for applying a set of middlewares to every endpoint in the service.
// Optionally, endpoints can be passed in by name to be excluded from being wrapped.
// WrapAllExcept(middleware, "Status", "Ping")
func (e *Endpoints) WrapAllExcept(middleware endpoint.Middleware, excluded ...string) {
	included := map[string]struct{}{
		"Create": {},
		"Get":    {},
		"List":   {},
		"Update": {},
		"Delete": {},
	}

	for _, ex := range excluded {
		if _, ok := included[ex]; !ok {
			panic(fmt.Sprintf("Excluded endpoint '%s' does not exist; see middlewares/endpoints.go", ex))
		}
		delete(included, ex)
	}

	for inc := range included {
		if inc == "Create" {
			e.CreateEndpoint = middleware(e.CreateEndpoint)
		}
		if inc == "Get" {
			e.GetEndpoint = middleware(e.GetEndpoint)
		}
		if inc == "List" {
			e.ListEndpoint = middleware(e.ListEndpoint)
		}
		if inc == "Update" {
			e.UpdateEndpoint = middleware(e.UpdateEndpoint)
		}
		if inc == "Delete" {
			e.DeleteEndpoint = middleware(e.DeleteEndpoint)
		}
	}
}

// LabeledMiddleware will get passed the endpoint name when passed to
// WrapAllLabeledExcept, this can be used to write a generic metrics
// middleware which can send the endpoint name to the metrics collector.
type LabeledMiddleware func(string, endpoint.Endpoint) endpoint.Endpoint

// WrapAllLabeledExcept wraps each Endpoint field of struct Endpoints with a
// LabeledMiddleware, which will receive the name of the endpoint. See
// LabeldMiddleware. See method WrapAllExept for details on excluded
// functionality.
func (e *Endpoints) WrapAllLabeledExcept(middleware func(string, endpoint.Endpoint) endpoint.Endpoint, excluded ...string) {
	included := map[string]struct{}{
		"Create": {},
		"Get":    {},
		"List":   {},
		"Update": {},
		"Delete": {},
	}

	for _, ex := range excluded {
		if _, ok := included[ex]; !ok {
			panic(fmt.Sprintf("Excluded endpoint '%s' does not exist; see middlewares/endpoints.go", ex))
		}
		delete(included, ex)
	}

	for inc := range included {
		if inc == "Create" {
			e.CreateEndpoint = middleware("Create", e.CreateEndpoint)
		}
		if inc == "Get" {
			e.GetEndpoint = middleware("Get", e.GetEndpoint)
		}
		if inc == "List" {
			e.ListEndpoint = middleware("List", e.ListEndpoint)
		}
		if inc == "Update" {
			e.UpdateEndpoint = middleware("Update", e.UpdateEndpoint)
		}
		if inc == "Delete" {
			e.DeleteEndpoint = middleware("Delete", e.DeleteEndpoint)
		}
	}
}
