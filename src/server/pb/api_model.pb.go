// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api_model.proto

// The package name determines the name of the directories that truss creates
// for `package Api;` truss will create the directory "Api-service".

package pb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// content
// get, post
type Api_MethodType int32

const (
	Api_GET     Api_MethodType = 0
	Api_HEAD    Api_MethodType = 1
	Api_POST    Api_MethodType = 2
	Api_PUT     Api_MethodType = 3
	Api_PATCH   Api_MethodType = 4
	Api_DELETE  Api_MethodType = 5
	Api_TRACE   Api_MethodType = 6
	Api_OPTIONS Api_MethodType = 7
)

var Api_MethodType_name = map[int32]string{
	0: "GET",
	1: "HEAD",
	2: "POST",
	3: "PUT",
	4: "PATCH",
	5: "DELETE",
	6: "TRACE",
	7: "OPTIONS",
}

var Api_MethodType_value = map[string]int32{
	"GET":     0,
	"HEAD":    1,
	"POST":    2,
	"PUT":     3,
	"PATCH":   4,
	"DELETE":  5,
	"TRACE":   6,
	"OPTIONS": 7,
}

func (x Api_MethodType) String() string {
	return proto.EnumName(Api_MethodType_name, int32(x))
}

func (Api_MethodType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_27a3320a6e8e11d1, []int{4, 0}
}

// one of
type BasicAuth struct {
	Type     string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	User     string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *BasicAuth) Reset()         { *m = BasicAuth{} }
func (m *BasicAuth) String() string { return proto.CompactTextString(m) }
func (*BasicAuth) ProtoMessage()    {}
func (*BasicAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_27a3320a6e8e11d1, []int{0}
}
func (m *BasicAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasicAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BasicAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BasicAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicAuth.Merge(m, src)
}
func (m *BasicAuth) XXX_Size() int {
	return m.Size()
}
func (m *BasicAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicAuth.DiscardUnknown(m)
}

var xxx_messageInfo_BasicAuth proto.InternalMessageInfo

func (m *BasicAuth) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BasicAuth) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *BasicAuth) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type JwtAuth struct {
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *JwtAuth) Reset()         { *m = JwtAuth{} }
func (m *JwtAuth) String() string { return proto.CompactTextString(m) }
func (*JwtAuth) ProtoMessage()    {}
func (*JwtAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_27a3320a6e8e11d1, []int{1}
}
func (m *JwtAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JwtAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JwtAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JwtAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JwtAuth.Merge(m, src)
}
func (m *JwtAuth) XXX_Size() int {
	return m.Size()
}
func (m *JwtAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_JwtAuth.DiscardUnknown(m)
}

var xxx_messageInfo_JwtAuth proto.InternalMessageInfo

func (m *JwtAuth) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type OAuth1 struct {
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *OAuth1) Reset()         { *m = OAuth1{} }
func (m *OAuth1) String() string { return proto.CompactTextString(m) }
func (*OAuth1) ProtoMessage()    {}
func (*OAuth1) Descriptor() ([]byte, []int) {
	return fileDescriptor_27a3320a6e8e11d1, []int{2}
}
func (m *OAuth1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OAuth1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OAuth1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OAuth1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAuth1.Merge(m, src)
}
func (m *OAuth1) XXX_Size() int {
	return m.Size()
}
func (m *OAuth1) XXX_DiscardUnknown() {
	xxx_messageInfo_OAuth1.DiscardUnknown(m)
}

var xxx_messageInfo_OAuth1 proto.InternalMessageInfo

func (m *OAuth1) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type OAuth2 struct {
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *OAuth2) Reset()         { *m = OAuth2{} }
func (m *OAuth2) String() string { return proto.CompactTextString(m) }
func (*OAuth2) ProtoMessage()    {}
func (*OAuth2) Descriptor() ([]byte, []int) {
	return fileDescriptor_27a3320a6e8e11d1, []int{3}
}
func (m *OAuth2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OAuth2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OAuth2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OAuth2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAuth2.Merge(m, src)
}
func (m *OAuth2) XXX_Size() int {
	return m.Size()
}
func (m *OAuth2) XXX_DiscardUnknown() {
	xxx_messageInfo_OAuth2.DiscardUnknown(m)
}

var xxx_messageInfo_OAuth2 proto.InternalMessageInfo

func (m *OAuth2) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Api struct {
	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// 负责人
	MemberIds []string `protobuf:"bytes,4,rep,name=member_ids,json=memberIds,proto3" json:"memberIds"`
	Method    string   `protobuf:"bytes,11,opt,name=method,proto3" json:"method,omitempty"`
	// 带表达式{xxx}
	Url        string            `protobuf:"bytes,13,opt,name=url,proto3" json:"url,omitempty"`
	Headers    map[string]string `protobuf:"bytes,14,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PathParams map[string]string `protobuf:"bytes,15,rep,name=path_params,json=pathParams,proto3" json:"pathParams" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UrlParams  map[string]string `protobuf:"bytes,16,rep,name=url_params,json=urlParams,proto3" json:"urlParams" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are valid to be assigned to Auth:
	//	*Api_Basic
	//	*Api_Jwt
	//	*Api_O1
	//	*Api_O2
	Auth    isApi_Auth `protobuf_oneof:"auth"`
	Body    string     `protobuf:"bytes,21,opt,name=body,proto3" json:"body,omitempty"`
	Timeout int32      `protobuf:"varint,22,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// UI 所在目录
	Directories []string `protobuf:"bytes,30,rep,name=directories,proto3" json:"directories,omitempty"`
	//
	CreateTime int64 `protobuf:"varint,41,opt,name=create_time,json=createTime,proto3" json:"createTime"`
	UpdateTime int64 `protobuf:"varint,42,opt,name=update_time,json=updateTime,proto3" json:"updateTime"`
}

func (m *Api) Reset()         { *m = Api{} }
func (m *Api) String() string { return proto.CompactTextString(m) }
func (*Api) ProtoMessage()    {}
func (*Api) Descriptor() ([]byte, []int) {
	return fileDescriptor_27a3320a6e8e11d1, []int{4}
}
func (m *Api) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Api) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Api.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Api) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Api.Merge(m, src)
}
func (m *Api) XXX_Size() int {
	return m.Size()
}
func (m *Api) XXX_DiscardUnknown() {
	xxx_messageInfo_Api.DiscardUnknown(m)
}

var xxx_messageInfo_Api proto.InternalMessageInfo

type isApi_Auth interface {
	isApi_Auth()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Api_Basic struct {
	Basic *BasicAuth `protobuf:"bytes,17,opt,name=basic,proto3,oneof"`
}
type Api_Jwt struct {
	Jwt *JwtAuth `protobuf:"bytes,18,opt,name=jwt,proto3,oneof"`
}
type Api_O1 struct {
	O1 *OAuth1 `protobuf:"bytes,19,opt,name=o1,proto3,oneof"`
}
type Api_O2 struct {
	O2 *OAuth2 `protobuf:"bytes,20,opt,name=o2,proto3,oneof"`
}

func (*Api_Basic) isApi_Auth() {}
func (*Api_Jwt) isApi_Auth()   {}
func (*Api_O1) isApi_Auth()    {}
func (*Api_O2) isApi_Auth()    {}

func (m *Api) GetAuth() isApi_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *Api) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Api) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Api) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Api) GetMemberIds() []string {
	if m != nil {
		return m.MemberIds
	}
	return nil
}

func (m *Api) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Api) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Api) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *Api) GetPathParams() map[string]string {
	if m != nil {
		return m.PathParams
	}
	return nil
}

func (m *Api) GetUrlParams() map[string]string {
	if m != nil {
		return m.UrlParams
	}
	return nil
}

func (m *Api) GetBasic() *BasicAuth {
	if x, ok := m.GetAuth().(*Api_Basic); ok {
		return x.Basic
	}
	return nil
}

func (m *Api) GetJwt() *JwtAuth {
	if x, ok := m.GetAuth().(*Api_Jwt); ok {
		return x.Jwt
	}
	return nil
}

func (m *Api) GetO1() *OAuth1 {
	if x, ok := m.GetAuth().(*Api_O1); ok {
		return x.O1
	}
	return nil
}

func (m *Api) GetO2() *OAuth2 {
	if x, ok := m.GetAuth().(*Api_O2); ok {
		return x.O2
	}
	return nil
}

func (m *Api) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Api) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *Api) GetDirectories() []string {
	if m != nil {
		return m.Directories
	}
	return nil
}

func (m *Api) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Api) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Api) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Api_OneofMarshaler, _Api_OneofUnmarshaler, _Api_OneofSizer, []interface{}{
		(*Api_Basic)(nil),
		(*Api_Jwt)(nil),
		(*Api_O1)(nil),
		(*Api_O2)(nil),
	}
}

func _Api_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Api)
	// auth
	switch x := m.Auth.(type) {
	case *Api_Basic:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Basic); err != nil {
			return err
		}
	case *Api_Jwt:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Jwt); err != nil {
			return err
		}
	case *Api_O1:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.O1); err != nil {
			return err
		}
	case *Api_O2:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.O2); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Api.Auth has unexpected type %T", x)
	}
	return nil
}

func _Api_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Api)
	switch tag {
	case 17: // auth.basic
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BasicAuth)
		err := b.DecodeMessage(msg)
		m.Auth = &Api_Basic{msg}
		return true, err
	case 18: // auth.jwt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JwtAuth)
		err := b.DecodeMessage(msg)
		m.Auth = &Api_Jwt{msg}
		return true, err
	case 19: // auth.o1
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OAuth1)
		err := b.DecodeMessage(msg)
		m.Auth = &Api_O1{msg}
		return true, err
	case 20: // auth.o2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OAuth2)
		err := b.DecodeMessage(msg)
		m.Auth = &Api_O2{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Api_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Api)
	// auth
	switch x := m.Auth.(type) {
	case *Api_Basic:
		s := proto.Size(x.Basic)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Api_Jwt:
		s := proto.Size(x.Jwt)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Api_O1:
		s := proto.Size(x.O1)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Api_O2:
		s := proto.Size(x.O2)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CreateApiRequest struct {
	Apis []*Api `protobuf:"bytes,1,rep,name=apis,proto3" json:"apis,omitempty"`
}

func (m *CreateApiRequest) Reset()         { *m = CreateApiRequest{} }
func (m *CreateApiRequest) String() string { return proto.CompactTextString(m) }
func (*CreateApiRequest) ProtoMessage()    {}
func (*CreateApiRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27a3320a6e8e11d1, []int{5}
}
func (m *CreateApiRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateApiRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateApiRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateApiRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateApiRequest.Merge(m, src)
}
func (m *CreateApiRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateApiRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateApiRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateApiRequest proto.InternalMessageInfo

func (m *CreateApiRequest) GetApis() []*Api {
	if m != nil {
		return m.Apis
	}
	return nil
}

type CreateApiResponse struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *CreateApiResponse) Reset()         { *m = CreateApiResponse{} }
func (m *CreateApiResponse) String() string { return proto.CompactTextString(m) }
func (*CreateApiResponse) ProtoMessage()    {}
func (*CreateApiResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27a3320a6e8e11d1, []int{6}
}
func (m *CreateApiResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateApiResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateApiResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateApiResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateApiResponse.Merge(m, src)
}
func (m *CreateApiResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateApiResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateApiResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateApiResponse proto.InternalMessageInfo

func (m *CreateApiResponse) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type GetApiRequest struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *GetApiRequest) Reset()         { *m = GetApiRequest{} }
func (m *GetApiRequest) String() string { return proto.CompactTextString(m) }
func (*GetApiRequest) ProtoMessage()    {}
func (*GetApiRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27a3320a6e8e11d1, []int{7}
}
func (m *GetApiRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetApiRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetApiRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetApiRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetApiRequest.Merge(m, src)
}
func (m *GetApiRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetApiRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetApiRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetApiRequest proto.InternalMessageInfo

func (m *GetApiRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type GetApiResponse struct {
	Apis []*Api `protobuf:"bytes,1,rep,name=Apis,proto3" json:"Apis,omitempty"`
}

func (m *GetApiResponse) Reset()         { *m = GetApiResponse{} }
func (m *GetApiResponse) String() string { return proto.CompactTextString(m) }
func (*GetApiResponse) ProtoMessage()    {}
func (*GetApiResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27a3320a6e8e11d1, []int{8}
}
func (m *GetApiResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetApiResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetApiResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetApiResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetApiResponse.Merge(m, src)
}
func (m *GetApiResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetApiResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetApiResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetApiResponse proto.InternalMessageInfo

func (m *GetApiResponse) GetApis() []*Api {
	if m != nil {
		return m.Apis
	}
	return nil
}

type ListApiRequest struct {
	Header      int32    `protobuf:"varint,1,opt,name=header,proto3" json:"header,omitempty"`
	Names       []string `protobuf:"bytes,5,rep,name=names,proto3" json:"names,omitempty"`
	CurrentPage int32    `protobuf:"varint,9,opt,name=current_page,json=currentPage,proto3" json:"currentPage"`
	PageSize    int32    `protobuf:"varint,10,opt,name=page_size,json=pageSize,proto3" json:"pageSize"`
}

func (m *ListApiRequest) Reset()         { *m = ListApiRequest{} }
func (m *ListApiRequest) String() string { return proto.CompactTextString(m) }
func (*ListApiRequest) ProtoMessage()    {}
func (*ListApiRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27a3320a6e8e11d1, []int{9}
}
func (m *ListApiRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListApiRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListApiRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListApiRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListApiRequest.Merge(m, src)
}
func (m *ListApiRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListApiRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListApiRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListApiRequest proto.InternalMessageInfo

func (m *ListApiRequest) GetHeader() int32 {
	if m != nil {
		return m.Header
	}
	return 0
}

func (m *ListApiRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *ListApiRequest) GetCurrentPage() int32 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

func (m *ListApiRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ListApiResponse struct {
	Headers []*KV  `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
	Apis    []*Api `protobuf:"bytes,2,rep,name=Apis,proto3" json:"Apis,omitempty"`
}

func (m *ListApiResponse) Reset()         { *m = ListApiResponse{} }
func (m *ListApiResponse) String() string { return proto.CompactTextString(m) }
func (*ListApiResponse) ProtoMessage()    {}
func (*ListApiResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_27a3320a6e8e11d1, []int{10}
}
func (m *ListApiResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListApiResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListApiResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListApiResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListApiResponse.Merge(m, src)
}
func (m *ListApiResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListApiResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListApiResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListApiResponse proto.InternalMessageInfo

func (m *ListApiResponse) GetHeaders() []*KV {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *ListApiResponse) GetApis() []*Api {
	if m != nil {
		return m.Apis
	}
	return nil
}

type UpdateApiRequest struct {
	Apis []*Api `protobuf:"bytes,1,rep,name=Apis,proto3" json:"Apis,omitempty"`
}

func (m *UpdateApiRequest) Reset()         { *m = UpdateApiRequest{} }
func (m *UpdateApiRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateApiRequest) ProtoMessage()    {}
func (*UpdateApiRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27a3320a6e8e11d1, []int{11}
}
func (m *UpdateApiRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateApiRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateApiRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateApiRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateApiRequest.Merge(m, src)
}
func (m *UpdateApiRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateApiRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateApiRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateApiRequest proto.InternalMessageInfo

func (m *UpdateApiRequest) GetApis() []*Api {
	if m != nil {
		return m.Apis
	}
	return nil
}

type DeleteApiRequest struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *DeleteApiRequest) Reset()         { *m = DeleteApiRequest{} }
func (m *DeleteApiRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteApiRequest) ProtoMessage()    {}
func (*DeleteApiRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_27a3320a6e8e11d1, []int{12}
}
func (m *DeleteApiRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteApiRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteApiRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteApiRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteApiRequest.Merge(m, src)
}
func (m *DeleteApiRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteApiRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteApiRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteApiRequest proto.InternalMessageInfo

func (m *DeleteApiRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.Api_MethodType", Api_MethodType_name, Api_MethodType_value)
	proto.RegisterType((*BasicAuth)(nil), "pb.BasicAuth")
	proto.RegisterType((*JwtAuth)(nil), "pb.JwtAuth")
	proto.RegisterType((*OAuth1)(nil), "pb.OAuth1")
	proto.RegisterType((*OAuth2)(nil), "pb.OAuth2")
	proto.RegisterType((*Api)(nil), "pb.Api")
	proto.RegisterMapType((map[string]string)(nil), "pb.Api.HeadersEntry")
	proto.RegisterMapType((map[string]string)(nil), "pb.Api.PathParamsEntry")
	proto.RegisterMapType((map[string]string)(nil), "pb.Api.UrlParamsEntry")
	proto.RegisterType((*CreateApiRequest)(nil), "pb.CreateApiRequest")
	proto.RegisterType((*CreateApiResponse)(nil), "pb.CreateApiResponse")
	proto.RegisterType((*GetApiRequest)(nil), "pb.GetApiRequest")
	proto.RegisterType((*GetApiResponse)(nil), "pb.GetApiResponse")
	proto.RegisterType((*ListApiRequest)(nil), "pb.ListApiRequest")
	proto.RegisterType((*ListApiResponse)(nil), "pb.ListApiResponse")
	proto.RegisterType((*UpdateApiRequest)(nil), "pb.UpdateApiRequest")
	proto.RegisterType((*DeleteApiRequest)(nil), "pb.DeleteApiRequest")
}

func init() { proto.RegisterFile("api_model.proto", fileDescriptor_27a3320a6e8e11d1) }

var fileDescriptor_27a3320a6e8e11d1 = []byte{
	// 877 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0x8e, 0xed, 0x7c, 0x34, 0xaf, 0xdb, 0xc4, 0x3b, 0x94, 0x32, 0xca, 0x2e, 0x49, 0xb0, 0x58,
	0x29, 0x8b, 0xd8, 0x44, 0x0d, 0x17, 0xb4, 0x82, 0x43, 0xd2, 0x46, 0x9b, 0x85, 0x85, 0x44, 0xae,
	0xcb, 0x35, 0x72, 0xe2, 0x21, 0x19, 0x88, 0xe3, 0xc1, 0x33, 0xa6, 0xea, 0xfe, 0x0a, 0xfe, 0x00,
	0x3f, 0x85, 0x3b, 0xc7, 0x3d, 0x72, 0xaa, 0x50, 0x7b, 0xeb, 0xaf, 0x40, 0x33, 0xb6, 0x13, 0x77,
	0xb7, 0x8b, 0xd4, 0xdb, 0xf3, 0x3e, 0xcf, 0xfb, 0xbc, 0xf1, 0xfb, 0x61, 0x07, 0xea, 0x1e, 0xa3,
	0xb3, 0x20, 0xf4, 0xc9, 0xba, 0xcb, 0xa2, 0x50, 0x84, 0x48, 0x67, 0xf3, 0xc6, 0xfe, 0x22, 0x0c,
	0x82, 0x70, 0x93, 0x30, 0x8d, 0xe7, 0x4b, 0x2a, 0x56, 0xf1, 0xbc, 0xbb, 0x08, 0x83, 0xde, 0x32,
	0x5c, 0x86, 0x3d, 0x45, 0xcf, 0xe3, 0x9f, 0x55, 0xa4, 0x02, 0x85, 0x92, 0x74, 0x7b, 0x02, 0xd5,
	0xa1, 0xc7, 0xe9, 0x62, 0x10, 0x8b, 0x15, 0x42, 0x50, 0x14, 0x97, 0x8c, 0x60, 0xad, 0xad, 0x75,
	0xaa, 0x8e, 0xc2, 0x92, 0x8b, 0x39, 0x89, 0xb0, 0x9e, 0x70, 0x12, 0xa3, 0x06, 0xec, 0x31, 0x8f,
	0xf3, 0x8b, 0x30, 0xf2, 0xb1, 0xa1, 0xf8, 0x6d, 0x6c, 0x7f, 0x0a, 0x95, 0xef, 0x2e, 0xc4, 0x87,
	0xca, 0xd9, 0x4f, 0xa0, 0x3c, 0x91, 0xe2, 0xf1, 0xff, 0xaa, 0xfd, 0x7b, 0xd5, 0xbf, 0x2a, 0x60,
	0x0c, 0x18, 0x45, 0x35, 0xd0, 0xa9, 0x9f, 0x2a, 0x3a, 0xf5, 0x65, 0xee, 0xc6, 0x0b, 0x48, 0xf6,
	0x88, 0x12, 0xa3, 0x36, 0x98, 0x3e, 0xe1, 0x8b, 0x88, 0x32, 0x41, 0xc3, 0x4d, 0xfa, 0x94, 0x79,
	0x0a, 0x7d, 0x09, 0x10, 0x90, 0x60, 0x4e, 0xa2, 0x19, 0xf5, 0x39, 0x2e, 0xb6, 0x8d, 0x4e, 0x75,
	0x78, 0x70, 0x7b, 0xd5, 0xaa, 0x26, 0xec, 0x2b, 0x9f, 0x3b, 0x3b, 0x88, 0x8e, 0xa0, 0x1c, 0x10,
	0xb1, 0x0a, 0x7d, 0x6c, 0xaa, 0x52, 0x69, 0x84, 0x2c, 0x30, 0xe2, 0x68, 0x8d, 0x0f, 0x14, 0x29,
	0x21, 0xea, 0x42, 0x65, 0x45, 0x3c, 0x9f, 0x44, 0x1c, 0xd7, 0xda, 0x46, 0xc7, 0xec, 0x1f, 0x76,
	0xd9, 0xbc, 0x3b, 0x60, 0xb4, 0x3b, 0x4e, 0xe8, 0xd1, 0x46, 0x44, 0x97, 0x4e, 0x96, 0x84, 0xc6,
	0x60, 0x32, 0x4f, 0xac, 0x66, 0xcc, 0x8b, 0xbc, 0x80, 0xe3, 0xba, 0xf2, 0x7c, 0x92, 0x79, 0xa6,
	0x9e, 0x58, 0x4d, 0x95, 0xa2, 0x6c, 0xc3, 0xda, 0xed, 0x55, 0x0b, 0xd8, 0x96, 0x74, 0x72, 0x18,
	0x9d, 0x02, 0xc4, 0xd1, 0x3a, 0x2b, 0x64, 0xa9, 0x42, 0x47, 0x59, 0xa1, 0xf3, 0x68, 0x9d, 0xaf,
	0xa3, 0x3a, 0x8d, 0x33, 0xce, 0xd9, 0x41, 0xf4, 0x14, 0x4a, 0x73, 0x79, 0x11, 0xf8, 0x51, 0x5b,
	0xeb, 0x98, 0xfd, 0x03, 0x59, 0x60, 0x7b, 0x22, 0xe3, 0x82, 0x93, 0xa8, 0xa8, 0x05, 0xc6, 0x2f,
	0x17, 0x02, 0x23, 0x95, 0x64, 0xca, 0xa4, 0x74, 0xed, 0xe3, 0x82, 0x23, 0x15, 0xf4, 0x04, 0xf4,
	0xf0, 0x18, 0x7f, 0xa4, 0x74, 0x90, 0x7a, 0xb2, 0xf7, 0x71, 0xc1, 0xd1, 0xc3, 0x63, 0xa5, 0xf6,
	0xf1, 0xe1, 0x3b, 0x6a, 0x5f, 0xa9, 0x6a, 0xfb, 0xf3, 0xd0, 0xbf, 0xc4, 0x1f, 0x27, 0x1b, 0x95,
	0x18, 0x61, 0xa8, 0x08, 0x1a, 0x90, 0x30, 0x16, 0xf8, 0xa8, 0xad, 0x75, 0x4a, 0x4e, 0x16, 0xaa,
	0x5d, 0xd3, 0x88, 0x2c, 0x44, 0x18, 0x51, 0xc2, 0x71, 0x53, 0xae, 0xd2, 0xc9, 0x53, 0xa8, 0x07,
	0xe6, 0x22, 0x22, 0x9e, 0x20, 0x33, 0xe9, 0xc1, 0xcf, 0xda, 0x5a, 0xc7, 0x48, 0x46, 0x99, 0xd0,
	0x2e, 0x0d, 0x88, 0x93, 0xc3, 0xd2, 0x10, 0x33, 0x7f, 0x6b, 0xf8, 0x62, 0x67, 0x48, 0xe8, 0xc4,
	0xb0, 0xc3, 0x8d, 0x17, 0xb0, 0x9f, 0x5f, 0xaf, 0xbc, 0x8b, 0x5f, 0xc9, 0x65, 0x7a, 0xa4, 0x12,
	0xa2, 0x43, 0x28, 0xfd, 0xee, 0xad, 0xe3, 0xec, 0x4c, 0x93, 0xe0, 0x85, 0xfe, 0xb5, 0xd6, 0xf8,
	0x16, 0xea, 0xef, 0xac, 0xf9, 0x41, 0xf6, 0x6f, 0xa0, 0x76, 0x77, 0xb9, 0x0f, 0x71, 0xdb, 0x1e,
	0xc0, 0x0f, 0xea, 0x94, 0x5d, 0xf9, 0xb6, 0x57, 0xc0, 0x78, 0x39, 0x72, 0xad, 0x02, 0xda, 0x83,
	0xe2, 0x78, 0x34, 0x38, 0xb5, 0x34, 0x89, 0xa6, 0x93, 0x33, 0xd7, 0xd2, 0xa5, 0x38, 0x3d, 0x77,
	0x2d, 0x03, 0x55, 0xa1, 0x34, 0x1d, 0xb8, 0x27, 0x63, 0xab, 0x88, 0x00, 0xca, 0xa7, 0xa3, 0xd7,
	0x23, 0x77, 0x64, 0x95, 0x24, 0xed, 0x3a, 0x83, 0x93, 0x91, 0x55, 0x46, 0x26, 0x54, 0x26, 0x53,
	0xf7, 0xd5, 0xe4, 0xc7, 0x33, 0xab, 0x32, 0x2c, 0x43, 0xd1, 0x8b, 0xc5, 0xca, 0xee, 0x81, 0x75,
	0xa2, 0x46, 0x3c, 0x60, 0xd4, 0x21, 0xbf, 0xc5, 0x84, 0x0b, 0xf4, 0x18, 0x8a, 0x1e, 0xa3, 0x1c,
	0x6b, 0xea, 0x5a, 0x2b, 0xe9, 0xb5, 0x3a, 0x8a, 0xb4, 0x9f, 0xc2, 0xa3, 0x9c, 0x81, 0xb3, 0x70,
	0xc3, 0x89, 0x6c, 0x4e, 0xbe, 0xb0, 0x9a, 0xda, 0xb2, 0x84, 0xf6, 0x67, 0x70, 0xf0, 0x92, 0x88,
	0x5c, 0xd1, 0xf7, 0x53, 0x9e, 0x43, 0x2d, 0x4b, 0x49, 0xcb, 0x3c, 0x86, 0xe2, 0xe0, 0xbe, 0x1f,
	0x96, 0xa4, 0xfd, 0xa7, 0x06, 0xb5, 0xd7, 0x94, 0xe7, 0x6b, 0x1e, 0x41, 0x39, 0x79, 0x63, 0xd5,
	0x58, 0x4b, 0x4e, 0x1a, 0xc9, 0xc9, 0xca, 0x0f, 0x0e, 0xc7, 0x25, 0xf5, 0x6b, 0x49, 0x80, 0xfa,
	0xb0, 0xbf, 0x88, 0xa3, 0x88, 0x6c, 0xc4, 0x8c, 0x79, 0x4b, 0x82, 0xab, 0xd2, 0x33, 0xac, 0xdf,
	0x5e, 0xb5, 0xcc, 0x94, 0x9f, 0x7a, 0x4b, 0xe2, 0xe4, 0x03, 0xf4, 0x0c, 0xaa, 0x32, 0x77, 0xc6,
	0xe9, 0x1b, 0x82, 0x41, 0x19, 0xf6, 0x6f, 0xaf, 0x5a, 0x7b, 0x92, 0x3c, 0xa3, 0x6f, 0x88, 0xb3,
	0x45, 0xf6, 0x14, 0xea, 0xdb, 0xc7, 0x4b, 0xfb, 0x69, 0xef, 0x3e, 0x3b, 0x49, 0x4b, 0x65, 0xd9,
	0xd2, 0xf7, 0x3f, 0xed, 0x3e, 0x34, 0x59, 0xc7, 0xfa, 0x7d, 0x1d, 0xf7, 0xc0, 0x3a, 0x57, 0xd7,
	0x7c, 0x77, 0x37, 0x1f, 0x1e, 0xd1, 0xe7, 0x60, 0x9d, 0x92, 0x35, 0xb9, 0x63, 0x78, 0x6f, 0xee,
	0x43, 0xfc, 0xf7, 0x75, 0x53, 0x7b, 0x7b, 0xdd, 0xd4, 0xfe, 0xbd, 0x6e, 0x6a, 0x7f, 0xdc, 0x34,
	0x0b, 0x6f, 0x6f, 0x9a, 0x85, 0x7f, 0x6e, 0x9a, 0x85, 0x79, 0x59, 0xfd, 0xff, 0x7c, 0xf5, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x19, 0x91, 0x0b, 0x6f, 0xd3, 0x06, 0x00, 0x00,
}

func (m *BasicAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasicAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.User) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *JwtAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JwtAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	return i, nil
}

func (m *OAuth1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OAuth1) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	return i, nil
}

func (m *OAuth2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OAuth2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	return i, nil
}

func (m *Api) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Api) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.MemberIds) > 0 {
		for _, s := range m.MemberIds {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Method) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Headers) > 0 {
		for k, _ := range m.Headers {
			dAtA[i] = 0x72
			i++
			v := m.Headers[k]
			mapSize := 1 + len(k) + sovApiModel(uint64(len(k))) + 1 + len(v) + sovApiModel(uint64(len(v)))
			i = encodeVarintApiModel(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApiModel(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApiModel(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.PathParams) > 0 {
		for k, _ := range m.PathParams {
			dAtA[i] = 0x7a
			i++
			v := m.PathParams[k]
			mapSize := 1 + len(k) + sovApiModel(uint64(len(k))) + 1 + len(v) + sovApiModel(uint64(len(v)))
			i = encodeVarintApiModel(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApiModel(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApiModel(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.UrlParams) > 0 {
		for k, _ := range m.UrlParams {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			v := m.UrlParams[k]
			mapSize := 1 + len(k) + sovApiModel(uint64(len(k))) + 1 + len(v) + sovApiModel(uint64(len(v)))
			i = encodeVarintApiModel(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApiModel(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApiModel(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Auth != nil {
		nn1, err1 := m.Auth.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += nn1
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if m.Timeout != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(m.Timeout))
	}
	if len(m.Directories) > 0 {
		for _, s := range m.Directories {
			dAtA[i] = 0xf2
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.CreateTime != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(m.CreateTime))
	}
	if m.UpdateTime != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(m.UpdateTime))
	}
	return i, nil
}

func (m *Api_Basic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Basic != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(m.Basic.Size()))
		n2, err2 := m.Basic.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}
func (m *Api_Jwt) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Jwt != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(m.Jwt.Size()))
		n3, err3 := m.Jwt.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	return i, nil
}
func (m *Api_O1) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.O1 != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(m.O1.Size()))
		n4, err4 := m.O1.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	return i, nil
}
func (m *Api_O2) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.O2 != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(m.O2.Size()))
		n5, err5 := m.O2.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	return i, nil
}
func (m *CreateApiRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateApiRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Apis) > 0 {
		for _, msg := range m.Apis {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApiModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateApiResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateApiResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GetApiRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetApiRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GetApiResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetApiResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Apis) > 0 {
		for _, msg := range m.Apis {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApiModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ListApiRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApiRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(m.Header))
	}
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.CurrentPage != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(m.CurrentPage))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApiModel(dAtA, i, uint64(m.PageSize))
	}
	return i, nil
}

func (m *ListApiResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListApiResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for _, msg := range m.Headers {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApiModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Apis) > 0 {
		for _, msg := range m.Apis {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApiModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpdateApiRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateApiRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Apis) > 0 {
		for _, msg := range m.Apis {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApiModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DeleteApiRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteApiRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintApiModel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BasicAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApiModel(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovApiModel(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovApiModel(uint64(l))
	}
	return n
}

func (m *JwtAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApiModel(uint64(l))
	}
	return n
}

func (m *OAuth1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApiModel(uint64(l))
	}
	return n
}

func (m *OAuth2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApiModel(uint64(l))
	}
	return n
}

func (m *Api) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApiModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApiModel(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApiModel(uint64(l))
	}
	if len(m.MemberIds) > 0 {
		for _, s := range m.MemberIds {
			l = len(s)
			n += 1 + l + sovApiModel(uint64(l))
		}
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovApiModel(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApiModel(uint64(l))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApiModel(uint64(len(k))) + 1 + len(v) + sovApiModel(uint64(len(v)))
			n += mapEntrySize + 1 + sovApiModel(uint64(mapEntrySize))
		}
	}
	if len(m.PathParams) > 0 {
		for k, v := range m.PathParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApiModel(uint64(len(k))) + 1 + len(v) + sovApiModel(uint64(len(v)))
			n += mapEntrySize + 1 + sovApiModel(uint64(mapEntrySize))
		}
	}
	if len(m.UrlParams) > 0 {
		for k, v := range m.UrlParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApiModel(uint64(len(k))) + 1 + len(v) + sovApiModel(uint64(len(v)))
			n += mapEntrySize + 2 + sovApiModel(uint64(mapEntrySize))
		}
	}
	if m.Auth != nil {
		n += m.Auth.Size()
	}
	l = len(m.Body)
	if l > 0 {
		n += 2 + l + sovApiModel(uint64(l))
	}
	if m.Timeout != 0 {
		n += 2 + sovApiModel(uint64(m.Timeout))
	}
	if len(m.Directories) > 0 {
		for _, s := range m.Directories {
			l = len(s)
			n += 2 + l + sovApiModel(uint64(l))
		}
	}
	if m.CreateTime != 0 {
		n += 2 + sovApiModel(uint64(m.CreateTime))
	}
	if m.UpdateTime != 0 {
		n += 2 + sovApiModel(uint64(m.UpdateTime))
	}
	return n
}

func (m *Api_Basic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Basic != nil {
		l = m.Basic.Size()
		n += 2 + l + sovApiModel(uint64(l))
	}
	return n
}
func (m *Api_Jwt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Jwt != nil {
		l = m.Jwt.Size()
		n += 2 + l + sovApiModel(uint64(l))
	}
	return n
}
func (m *Api_O1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.O1 != nil {
		l = m.O1.Size()
		n += 2 + l + sovApiModel(uint64(l))
	}
	return n
}
func (m *Api_O2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.O2 != nil {
		l = m.O2.Size()
		n += 2 + l + sovApiModel(uint64(l))
	}
	return n
}
func (m *CreateApiRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Apis) > 0 {
		for _, e := range m.Apis {
			l = e.Size()
			n += 1 + l + sovApiModel(uint64(l))
		}
	}
	return n
}

func (m *CreateApiResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovApiModel(uint64(l))
		}
	}
	return n
}

func (m *GetApiRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovApiModel(uint64(l))
		}
	}
	return n
}

func (m *GetApiResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Apis) > 0 {
		for _, e := range m.Apis {
			l = e.Size()
			n += 1 + l + sovApiModel(uint64(l))
		}
	}
	return n
}

func (m *ListApiRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != 0 {
		n += 1 + sovApiModel(uint64(m.Header))
	}
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovApiModel(uint64(l))
		}
	}
	if m.CurrentPage != 0 {
		n += 1 + sovApiModel(uint64(m.CurrentPage))
	}
	if m.PageSize != 0 {
		n += 1 + sovApiModel(uint64(m.PageSize))
	}
	return n
}

func (m *ListApiResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 1 + l + sovApiModel(uint64(l))
		}
	}
	if len(m.Apis) > 0 {
		for _, e := range m.Apis {
			l = e.Size()
			n += 1 + l + sovApiModel(uint64(l))
		}
	}
	return n
}

func (m *UpdateApiRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Apis) > 0 {
		for _, e := range m.Apis {
			l = e.Size()
			n += 1 + l + sovApiModel(uint64(l))
		}
	}
	return n
}

func (m *DeleteApiRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovApiModel(uint64(l))
		}
	}
	return n
}

func sovApiModel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApiModel(x uint64) (n int) {
	return sovApiModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BasicAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasicAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasicAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JwtAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JwtAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JwtAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OAuth1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OAuth1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OAuth1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OAuth2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OAuth2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OAuth2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Api) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Api: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Api: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberIds = append(m.MemberIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApiModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApiModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApiModel
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApiModel
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApiModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApiModel
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApiModel
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApiModel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApiModel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PathParams == nil {
				m.PathParams = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApiModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApiModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApiModel
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApiModel
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApiModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApiModel
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApiModel
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApiModel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApiModel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PathParams[mapkey] = mapvalue
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UrlParams == nil {
				m.UrlParams = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApiModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApiModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApiModel
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthApiModel
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApiModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApiModel
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthApiModel
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApiModel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApiModel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.UrlParams[mapkey] = mapvalue
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Basic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BasicAuth{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Auth = &Api_Basic{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jwt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JwtAuth{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Auth = &Api_Jwt{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field O1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OAuth1{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Auth = &Api_O1{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field O2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OAuth2{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Auth = &Api_O2{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Directories", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Directories = append(m.Directories, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTime", wireType)
			}
			m.UpdateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateApiRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateApiRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateApiRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apis = append(m.Apis, &Api{})
			if err := m.Apis[len(m.Apis)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateApiResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateApiResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateApiResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetApiRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetApiRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetApiRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetApiResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetApiResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetApiResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apis = append(m.Apis, &Api{})
			if err := m.Apis[len(m.Apis)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApiRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApiRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApiRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			m.Header = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Header |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPage", wireType)
			}
			m.CurrentPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApiModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListApiResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListApiResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListApiResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &KV{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apis = append(m.Apis, &Api{})
			if err := m.Apis[len(m.Apis)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateApiRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateApiRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateApiRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apis = append(m.Apis, &Api{})
			if err := m.Apis[len(m.Apis)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteApiRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteApiRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteApiRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApiModel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApiModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApiModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApiModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApiModel
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthApiModel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApiModel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApiModel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthApiModel
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApiModel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApiModel   = fmt.Errorf("proto: integer overflow")
)
