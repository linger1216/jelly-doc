// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api_service.proto

// The package name determines the name of the directories that truss creates
// for `package api;` truss will create the directory "api-service".

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/metaverse/truss/deftree/googlethirdparty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("api_service.proto", fileDescriptor_dac1f622be3e5824) }

var fileDescriptor_dac1f622be3e5824 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0xd1, 0x31, 0x4b, 0xf3, 0x40,
	0x18, 0x07, 0xf0, 0xa6, 0x2d, 0xe1, 0xe5, 0x28, 0xf4, 0xed, 0xd9, 0x42, 0xc9, 0x90, 0xa1, 0x93,
	0x74, 0xc8, 0xa1, 0x6e, 0x6e, 0xad, 0x8d, 0x0a, 0x76, 0x12, 0x1c, 0x74, 0x91, 0x4b, 0xf2, 0x98,
	0x9e, 0x24, 0xb9, 0xf3, 0xee, 0x52, 0x28, 0xe2, 0xe2, 0x17, 0x50, 0xf0, 0x4b, 0x39, 0x16, 0x5c,
	0x1c, 0xa5, 0xf5, 0x83, 0x48, 0xaf, 0xb1, 0x46, 0x05, 0xb7, 0x27, 0x7f, 0x78, 0x7e, 0x79, 0xfe,
	0x1c, 0x6a, 0x51, 0xc1, 0x2e, 0x15, 0xc8, 0x29, 0x0b, 0xc1, 0x13, 0x92, 0x6b, 0x8e, 0xab, 0x22,
	0x70, 0xfc, 0x98, 0xe9, 0x49, 0x1e, 0x78, 0x21, 0x4f, 0x49, 0x0a, 0x9a, 0x4e, 0x41, 0x2a, 0x20,
	0x5a, 0xe6, 0x4a, 0x91, 0x08, 0xae, 0xb4, 0x04, 0x20, 0x31, 0xe7, 0x71, 0x02, 0x7a, 0xc2, 0x64,
	0x24, 0xa8, 0xd4, 0x33, 0x42, 0xb3, 0x8c, 0x6b, 0xaa, 0x19, 0xcf, 0xd4, 0x9a, 0x72, 0x1a, 0x21,
	0x4f, 0x53, 0x9e, 0x15, 0x5f, 0xcd, 0xd5, 0xbf, 0x52, 0x1e, 0x41, 0xb2, 0x0e, 0x76, 0x1f, 0x6a,
	0xe8, 0xdf, 0x90, 0x2a, 0xa6, 0x06, 0x82, 0xe1, 0x31, 0xb2, 0x43, 0x09, 0x54, 0x03, 0x6e, 0x7b,
	0x22, 0xf0, 0x0e, 0xcc, 0x3c, 0x10, 0xec, 0x14, 0x6e, 0x72, 0x50, 0xda, 0xe9, 0xfc, 0x48, 0x95,
	0xe0, 0x99, 0x82, 0x5e, 0xe7, 0xfe, 0xe5, 0xfd, 0xa9, 0xda, 0xec, 0x21, 0x72, 0x1d, 0x91, 0xe9,
	0x0e, 0xa1, 0x82, 0xed, 0x5b, 0x7d, 0x7c, 0x88, 0x6a, 0x31, 0x68, 0xdc, 0x5a, 0x2d, 0x1d, 0x81,
	0x2e, 0x39, 0xb8, 0x1c, 0x15, 0x48, 0xd7, 0x20, 0x18, 0xff, 0xff, 0x42, 0xc8, 0x2d, 0x8b, 0xd4,
	0x1d, 0x3e, 0x47, 0xf5, 0x84, 0x29, 0x8d, 0xcd, 0xd6, 0x98, 0xa9, 0xb2, 0xb4, 0xf5, 0x2d, 0x2b,
	0xa8, 0x6d, 0x43, 0xf5, 0x70, 0xe9, 0x9e, 0x8b, 0xf6, 0x10, 0xa3, 0xfa, 0xb1, 0x3f, 0x18, 0x95,
	0x53, 0xec, 0x23, 0x3b, 0x17, 0xd1, 0xa6, 0xf0, 0x99, 0x99, 0x4b, 0xbc, 0xb9, 0xdd, 0x4f, 0x85,
	0x9e, 0x6d, 0x70, 0x6c, 0xf0, 0x86, 0x53, 0x66, 0x4e, 0x90, 0x1d, 0x41, 0x02, 0x9f, 0xcc, 0xc8,
	0xcc, 0x7f, 0x33, 0x45, 0xdd, 0xfe, 0xaf, 0xba, 0xc3, 0xee, 0xf3, 0xc2, 0xb5, 0xe6, 0x0b, 0xd7,
	0x7a, 0x5b, 0xb8, 0xd6, 0xe3, 0xd2, 0xad, 0xcc, 0x97, 0x6e, 0xe5, 0x75, 0xe9, 0x56, 0x02, 0xdb,
	0x3c, 0xd9, 0xde, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf9, 0xa8, 0x2e, 0x3a, 0x31, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BasisApiClient is the client API for BasisApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BasisApiClient interface {
	Create(ctx context.Context, in *CreateApiRequest, opts ...grpc.CallOption) (*CreateApiResponse, error)
	Get(ctx context.Context, in *GetApiRequest, opts ...grpc.CallOption) (*GetApiResponse, error)
	List(ctx context.Context, in *ListApiRequest, opts ...grpc.CallOption) (*ListApiResponse, error)
	Update(ctx context.Context, in *UpdateApiRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	Delete(ctx context.Context, in *DeleteApiRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type basisApiClient struct {
	cc *grpc.ClientConn
}

func NewBasisApiClient(cc *grpc.ClientConn) BasisApiClient {
	return &basisApiClient{cc}
}

func (c *basisApiClient) Create(ctx context.Context, in *CreateApiRequest, opts ...grpc.CallOption) (*CreateApiResponse, error) {
	out := new(CreateApiResponse)
	err := c.cc.Invoke(ctx, "/pb.BasisApi/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basisApiClient) Get(ctx context.Context, in *GetApiRequest, opts ...grpc.CallOption) (*GetApiResponse, error) {
	out := new(GetApiResponse)
	err := c.cc.Invoke(ctx, "/pb.BasisApi/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basisApiClient) List(ctx context.Context, in *ListApiRequest, opts ...grpc.CallOption) (*ListApiResponse, error) {
	out := new(ListApiResponse)
	err := c.cc.Invoke(ctx, "/pb.BasisApi/list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basisApiClient) Update(ctx context.Context, in *UpdateApiRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/pb.BasisApi/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basisApiClient) Delete(ctx context.Context, in *DeleteApiRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/pb.BasisApi/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasisApiServer is the server API for BasisApi service.
type BasisApiServer interface {
	Create(context.Context, *CreateApiRequest) (*CreateApiResponse, error)
	Get(context.Context, *GetApiRequest) (*GetApiResponse, error)
	List(context.Context, *ListApiRequest) (*ListApiResponse, error)
	Update(context.Context, *UpdateApiRequest) (*EmptyResponse, error)
	Delete(context.Context, *DeleteApiRequest) (*EmptyResponse, error)
}

// UnimplementedBasisApiServer can be embedded to have forward compatible implementations.
type UnimplementedBasisApiServer struct {
}

func (*UnimplementedBasisApiServer) Create(ctx context.Context, req *CreateApiRequest) (*CreateApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedBasisApiServer) Get(ctx context.Context, req *GetApiRequest) (*GetApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedBasisApiServer) List(ctx context.Context, req *ListApiRequest) (*ListApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedBasisApiServer) Update(ctx context.Context, req *UpdateApiRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedBasisApiServer) Delete(ctx context.Context, req *DeleteApiRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterBasisApiServer(s *grpc.Server, srv BasisApiServer) {
	s.RegisterService(&_BasisApi_serviceDesc, srv)
}

func _BasisApi_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasisApiServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BasisApi/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasisApiServer).Create(ctx, req.(*CreateApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasisApi_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasisApiServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BasisApi/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasisApiServer).Get(ctx, req.(*GetApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasisApi_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasisApiServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BasisApi/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasisApiServer).List(ctx, req.(*ListApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasisApi_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasisApiServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BasisApi/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasisApiServer).Update(ctx, req.(*UpdateApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasisApi_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasisApiServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BasisApi/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasisApiServer).Delete(ctx, req.(*DeleteApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BasisApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BasisApi",
	HandlerType: (*BasisApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _BasisApi_Create_Handler,
		},
		{
			MethodName: "get",
			Handler:    _BasisApi_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _BasisApi_List_Handler,
		},
		{
			MethodName: "update",
			Handler:    _BasisApi_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _BasisApi_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_service.proto",
}
